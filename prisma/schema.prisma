// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  properties    Property[]
  tenants       Tenant[]
}

model Property {
  id            String    @id @default(cuid())
  name          String
  address       String
  city          String
  state         String
  zipCode       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms         Room[]
}

model Room {
  id            String    @id @default(cuid())
  roomNumber    String
  floor         String?
  type          RoomType
  capacity      Int       @default(1)
  price         Float
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  propertyId    String
  property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenants       Tenant[]
}

model Tenant {
  id            String    @id @default(cuid())
  name          String
  email         String
  phone         String
  emergencyContact String?
  rentAmount    Float
  securityDeposit Float?
  leaseStart    DateTime
  leaseEnd      DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId        String
  room          Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payments      Payment[]
}

model Payment {
  id            String    @id @default(cuid())
  amount        Float
  paymentDate   DateTime  @default(now())
  paymentType   PaymentType
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  SUITE
}

enum PaymentType {
  RENT
  SECURITY_DEPOSIT
  MAINTENANCE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
